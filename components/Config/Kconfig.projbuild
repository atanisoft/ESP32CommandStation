###############################################################################
# NOTE: All log level config options must be kept in sync with
# components/OpenMRNIDF/src/utils/logging.h:
#
# ALWAYS      : -1
# FATAL       :  0
# LEVEL_ERROR :  1
# WARNING     :  2
# INFO        :  3
# VERBOSE     :  4
#
# Note that FATAL will cause the MCU to reboot!
#
###############################################################################
menu "Pin Configuration"
    menu "DCC"
        config DCC_TRACK_SIGNAL_PIN
            int "Track signal/direction pin"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 16 if IDF_TARGET_ESP32
            default 21 if IDF_TARGET_ESP32S3
            help
                This pin will transition HIGH/LOW based on the DCC signal
                data being generated by the command station. This should
                typically be connected to the direction pin on the H-Bridge
                IC.
        config DCC_TRACK_BRAKE_PIN
            int "Track brake pin"
            range -1 33 if IDF_TARGET_ESP32
            range -1 48 if IDF_TARGET_ESP32S3
            default -1
            help
                This pin is used for the H-Bridge brake pin. If used, this will
                be the inverse of the OPS/PROG enable pin.
    endmenu
    menu "OPS"
        depends on DCC_TRACK_OUTPUTS_OPS_AND_PROG || DCC_TRACK_OUTPUTS_OPS_ONLY
        config OPS_TRACK_ENABLE_PIN
            int "OPS Track enable/pwm pin"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 17 if IDF_TARGET_ESP32
            default 46 if IDF_TARGET_ESP32S3
            help
                This pin will be HIGH when the H-Bridge output should be
                enabled and will be LOW when it should be disabled. This
                pin should typically be connected to the PWM input of the
                H-Bridge IC.
        choice OPS_TRACK_CURRENT_SENSE_ADC
            bool "OPS Track current sense pin"
            help
                This is used for short circuit detection.
            default OPSTRACK_ADC_CHANNEL_0 if IDF_TARGET_ESP32
            default OPSTRACK_ADC_CHANNEL_0 if IDF_TARGET_ESP32S3
            config OPSTRACK_ADC_CHANNEL_0
                bool "ADC1 Channel 0 (GPIO 36)"
            config OPSTRACK_ADC_CHANNEL_3
                bool "ADC1 Channel 3 (GPIO 39)"
            config OPSTRACK_ADC_CHANNEL_4
                bool "ADC1 Channel 4 (GPIO 32)"
            config OPSTRACK_ADC_CHANNEL_5
                bool "ADC1 Channel 5 (GPIO 33)"
            config OPSTRACK_ADC_CHANNEL_6
                bool "ADC1 Channel 6 (GPIO 34)"
            config OPSTRACK_ADC_CHANNEL_7
                bool "ADC1 Channel 7 (GPIO 35)"
        endchoice
    endmenu
    menu "PROG"
        depends on DCC_TRACK_OUTPUTS_OPS_AND_PROG || DCC_TRACK_OUTPUTS_PROG_ONLY
        config PROG_TRACK_ENABLE_PIN
            int "PROG Track enable/pwm pin"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 18 if IDF_TARGET_ESP32
            default 9 if IDF_TARGET_ESP32S3
            help
                This pin will be HIGH when the H-Bridge output should be
                enabled and will be LOW when it should be disabled. This
                pin should typically be connected to the PWM input of the
                H-Bridge IC.
        choice PROG_TRACK_CURRENT_SENSE_ADC
            bool "PROG Track current sense pin"
            help
                This is used for short circuit detection.
            default PROGTRACK_ADC_CHANNEL_3 if IDF_TARGET_ESP32
            default PROGTRACK_ADC_CHANNEL_3 if IDF_TARGET_ESP32S3
            config PROGTRACK_ADC_CHANNEL_0
                bool "ADC1 Channel 0 (GPIO 36)"
            config PROGTRACK_ADC_CHANNEL_3
                bool "ADC1 Channel 3 (GPIO 39)"
            config PROGTRACK_ADC_CHANNEL_4
                bool "ADC1 Channel 4 (GPIO 32)"
            config PROGTRACK_ADC_CHANNEL_5
                bool "ADC1 Channel 5 (GPIO 33)"
            config PROGTRACK_ADC_CHANNEL_6
                bool "ADC1 Channel 6 (GPIO 34)"
            config PROGTRACK_ADC_CHANNEL_7
                bool "ADC1 Channel 7 (GPIO 35)"
        endchoice
    endmenu
    menu "RailCom"
        depends on RAILCOM_FULL || RAILCOM_CUTOUT_ONLY
        config RAILCOM_TRIGGER_PIN
            int "RailCom Enable pin"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 12 if IDF_TARGET_ESP32
            default 47 if IDF_TARGET_ESP32S3
            help
                This pin is used to enable the RailCom detector circuit.
        config RAILCOM_DATA_PIN
            int "RailCom data pin"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 26 if IDF_TARGET_ESP32
            default 48 if IDF_TARGET_ESP32S3
            depends on RAILCOM_FULL
            help
                This pin is used for the RailCom UART RX pin.
        config RAILCOM_DIRECTION_PIN
            int "RailCom direction pin"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 25 if IDF_TARGET_ESP32
            default 45 if IDF_TARGET_ESP32S3
            depends on RAILCOM_FULL
            help
                This pin is used to indicate the direction of travel when
                RailCom data is received.
    endmenu
    menu "I2C"
        config I2C_SCL_PIN
            int "SCL"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 21 if IDF_TARGET_ESP32
            default 35 if IDF_TARGET_ESP32S3
            help
                This pin is used for the I2C clock output.

        config I2C_SDA_PIN
            int "SDA"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 23 if IDF_TARGET_ESP32
            default 36 if IDF_TARGET_ESP32S3
            help
                This pin is used for I2C data.
    endmenu
    menu "Status LED"
        visible if IDF_TARGET_ESP32
        config STATUS_LED_DATA_PIN
            int "LED Data Pin"
            range -1 33
            default 22 if IDF_TARGET_ESP32
            default -1 if IDF_TARGET_ESP32S3
            help
                This pin is used to output a digital signal for Addressable
                LEDs. Currently five LEDs are used to indicate status of the
                Command Station. Set this pin to -1 to disable the usage of the
                Status LEDs.
    endmenu
    menu "Status Display"
        depends on DISPLAY_TYPE_OLED
        config OLED_RESET_PIN
            int "OLED Reset Pin"
            range -1 33 if IDF_TARGET_ESP32
            range -1 48 if IDF_TARGET_ESP32S3
            default 0 if IDF_TARGET_ESP32
            default 0 if IDF_TARGET_ESP32S3
            help
                If the connected OLED display requires a reset pulse during
                startup, set this to the required pin. Otherwise set to -1
                to disable this functionality.
    endmenu
    menu "Buttons"
        config FACTORY_RESET_PIN
            int "Factory Reset Pin"
            range -1 39 if IDF_TARGET_ESP32
            range -1 48 if IDF_TARGET_ESP32S3
            default 32 if IDF_TARGET_ESP32
            default 15 if IDF_TARGET_ESP32S3
            help
                When this pin is pulled to GND during startup for 10 seconds the
                ESP32 Command Station will reset persistent configuration data.
                If it is only held for 5 seconds during startup all OpenLCB
                event IDs will be regenerated.
                Set to -1 to disable this functionality.

        config BOOTLOADER_PIN
            int "Bootloader Request Pin"
            range -1 39 if IDF_TARGET_ESP32
            range -1 48 if IDF_TARGET_ESP32S3
            default 33 if IDF_TARGET_ESP32
            default 7 if IDF_TARGET_ESP32S3
            help
                When this pin is pulled to GND during startup the ESP32 Command
                Station will enter the OpenLCB bootloader rather than enter the
                normal startup process.
                Set to -1 to disable this functionality.
    endmenu
    menu "TWAI (CAN)"
        depends on OLCB_TWAI_ENABLED
        config OLCB_TWAI_RX_PIN
            int "TWAI RX Pin"
            range 0 39 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 4 if IDF_TARGET_ESP32
            default 16 if IDF_TARGET_ESP32S3
            help
                This is the ESP32 pin connected to the SN6565HVD23x/MCP2551 R (RX) pin.
                NOTE: Setting this to a value other than -1 will require an externally
                connected CAN transceiver IC.
    
        config OLCB_TWAI_TX_PIN
            int "TWAI TX Pin"
            range 0 33 if IDF_TARGET_ESP32
            range 0 48 if IDF_TARGET_ESP32S3
            default 5 if IDF_TARGET_ESP32
            default 17 if IDF_TARGET_ESP32S3
            help
                This is the ESP32 pin connected to the SN6565HVD23x/MCP2551 D (TX) pin.
                NOTE: Setting this to a value other than -1 will require an externally
                connected CAN transceiver IC.
    endmenu
    menu "Thermal Sensor"
        choice TEMPSENSOR_ADC_CHANNEL
            bool "Thermistor IC pin"
            help
                This is used for connecting a thermistor to the ESP32 Command
                Station, when the temperature is too high the ESP32 Command
                Station will shutdown track output power until temperature has
                dropped below configured levels.
            default TEMPSENSOR_ADC_CHANNEL_7 if IDF_TARGET_ESP32
            default TEMPSENSOR_DISABLED if IDF_TARGET_ESP32S3
            config TEMPSENSOR_DISABLED
                bool "Disabled"
            config TEMPSENSOR_ADC_CHANNEL_0
                bool "ADC1 Channel 0 (GPIO 36)"
            config TEMPSENSOR_ADC_CHANNEL_3
                bool "ADC1 Channel 3 (GPIO 39)"
            config TEMPSENSOR_ADC_CHANNEL_4
                bool "ADC1 Channel 4 (GPIO 32)"
            config TEMPSENSOR_ADC_CHANNEL_5
                bool "ADC1 Channel 5 (GPIO 33)"
            config TEMPSENSOR_ADC_CHANNEL_6
                bool "ADC1 Channel 6 (GPIO 34)"
            config TEMPSENSOR_ADC_CHANNEL_7
                bool "ADC1 Channel 7 (GPIO 35)"
        endchoice

        config TEMPSENSOR_ADC_CHANNEL
            int
            default 0 if TEMPSENSOR_ADC_CHANNEL_0
            default 3 if TEMPSENSOR_ADC_CHANNEL_3
            default 4 if TEMPSENSOR_ADC_CHANNEL_4
            default 5 if TEMPSENSOR_ADC_CHANNEL_5
            default 6 if TEMPSENSOR_ADC_CHANNEL_6
            default 7 if TEMPSENSOR_ADC_CHANNEL_7
            default -1
    endmenu
    menu "SD Card"
        config SD_MISO
            int
            default 2
        config SD_MOSI
            int
            default 15
        config SD_CLOCK
            int
            default 14
        config SD_SELECT
            int
            default 13
    endmenu
endmenu
menu "OpenLCB Configuration"
    config OLCB_NODE_ID
        hex "Node ID"
        default 0x05020103FFFE
        help 
            This is the LCC node identifier for the ESP32 Command Station.
            It is recommended, but not required, to request your own ID
            range via:
            https://registry.openlcb.org/requestuniqueidrange
            The default node ID is part of a reserved range of ID values.
    config OLCB_TWAI_ENABLED
        bool "Enable TWAI (CAN) interface"
        default y
    config OLCB_TWAI_SELECT
        bool "Use select() based TWAI driver"
        default y
        depends on OLCB_TWAI_ENABLED
    config OLCB_MEMORY_SPACES
        int "MemoryConfig space limit"
        default 10
        help
            Maximum number of memory spaces that can be registered for the
            MemoryConfig datagram handler.
    config OLCB_EXECUTOR_SELECT_PRESCALER
        int "StateFlows to execute between select() calls"
        range 5 300
        default 60
        help
            Executors will run this many Executables (if there is anything
            scheduled) before two calls to select. This helps in reducing the
            overhead of the select calls.
    config OLCB_LOCAL_ALIAS_COUNT
        int "Number of 'local' LCC aliases"
        default 100
        help
            This controls how many trains will be supported concurrently by
            the command station.
    config OLCB_SD_FSYNC_SEC
        int "Automatic fsync() interval (seconds)"
        default 10
        help
            For some file systems (SD only currently) it is required to call
            fsync() to force synchronize file changes to the file system due to
            small file size. In the case of the SD file system any file
            modification smaller than 512 bytes will remain in the in-memory
            cache and not be persisted to the SD card without a call to fsync()
            or close(). In the case of the LCC CDI file, the CDI file remains
            open for the lifetime of the application.
    config OLCB_GC_OUTBOUND_PACKET_LIMIT
        int "GridConnect outbound packet count limit"
        default 5
        help
            Number of pending buffers (of type string) in the outgoing hub on a
            per-connection basis. This limit ensures that we don't leak memory
            if the output socket cannot send the data fast enough.
    config OLCB_GC_INBOUND_PACKET_LIMIT
        int "GridConnect inbound packet count limit"
        default 5
        help
            Number of pending buffers (of type string) in the incoming hub on a
            per-connection basis. This limit ensures that we don't leak memory
            if the output socket cannot send the data fast enough.
    config OLCB_PRINT_ALL_PACKETS
        bool "Print all packets"
        default n
        help
            Enabling this option will cause all LCC packets to be printed to
            the serial console.
    config OLCB_GC_NEWLINES
        bool "Add newline to GridConnect packets"
        default y if OLCB_PRINT_ALL_PACKETS
        default n
        help
            Enabling this option will generate a newline character after
            every GridConnect packet that is sent out. This is generally
            only needed for debug purposes.
endmenu
menu "Status Display"
    choice DISPLAY_TYPE
        bool "Type of display"
        default DISPLAY_TYPE_NONE
        config DISPLAY_TYPE_NONE
            bool "None"
        config DISPLAY_TYPE_OLED
            bool "OLED"
        config DISPLAY_TYPE_LCD
            bool "LCD"
    endchoice
    choice DISPLAY_LCD_TYPE
        bool "Type of LCD display"
        default DISPLAY_LCD_20x4
        depends on DISPLAY_TYPE_LCD
        config DISPLAY_LCD_20x4
            bool "20 columns, 4 lines"
        config DISPLAY_LCD_16x4
            bool "16 columns, 4 lines"
        config DISPLAY_LCD_20x2
            bool "20 columns, 2 lines"
        config DISPLAY_LCD_16x2
            bool "16 columns, 2 lines"
    endchoice
    menu "LCD"
        depends on DISPLAY_TYPE_LCD
        config DISPLAY_LCD_BACKLIGHT
            bool "Enable LCD Backlight"
            help
                Enabling this option will set the backlight bitmask to ON. Some
                LCD displays require this to be LOW.
            default y
        config DISPLAY_LCD_ENABLE_BITMASK
            hex "LCD Enable bitmask"
            help
                Bit to set for the Enable pin
            default 0x04
        config DISPLAY_LCD_REGISTER_SELECT_BITMASK
            hex "LCD Register Select bitmask"
            help
                Bit to set for the Register Select pin
            default 0x01
        config DISPLAY_LCD_BACKLIGHT_BITMASK
            hex "LCD Backlight Enable bitmask"
            help
                Bit to set for the Backlight pin
            default 0x08 if DISPLAY_LCD_BACKLIGHT
            default 0x00 if !DISPLAY_LCD_BACKLIGHT
    endmenu
    menu "OLED"
        depends on DISPLAY_TYPE_OLED
        choice DISPLAY_OLED_TYPE
            bool "Size of OLED display"
            default DISPLAY_OLED_128x64
            config DISPLAY_OLED_128x64
                bool "128x64"
            config DISPLAY_OLED_128x32
                bool "128x32"
            config DISPLAY_OLED_96x16
                bool "96x16"
        endchoice
        choice DISPLAY_OLED_FONT
            bool "OLED Font"
            default DISPLAY_OLED_FONT_BOLD
            config DISPLAY_OLED_FONT_THIN
                bool "Thin"
            config DISPLAY_OLED_FONT_BOLD
                bool "Bold"
        endchoice
        config DISPLAY_OLED_VFLIP
            bool "Vertically inverted display"
            default n
        config DISPLAY_OLED_CONTRAST
            int "Contrast Level"
            help
                This controls how bright the OLED screen appears, default ratio
                is 128 (out of 255).
            default 128
            range 0 255
    endmenu

    config DISPLAY_LINE_COUNT
        int
        default 8 if DISPLAY_OLED_128x64
        default 4 if DISPLAY_OLED_128x32 || DISPLAY_LCD_20x4 || DISPLAY_LCD_16x4
        default 2 if DISPLAY_OLED_96x16 || DISPLAY_LCD_20x2 || DISPLAY_LCD_16x2
        depends on !DISPLAY_TYPE_NONE
    config DISPLAY_COLUMN_COUNT
        int
        default 20 if DISPLAY_LCD_20x4
        default 16 if DISPLAY_OLED_128x64 || DISPLAY_OLED_128x32 || DISPLAY_LCD_16x4 || DISPLAY_LCD_16x2
        default 12 if DISPLAY_OLED_96x16
        depends on !DISPLAY_TYPE_NONE
    config DISPLAY_OLED_WIDTH
        int
        default 96 if DISPLAY_OLED_96x16
        default 128 if DISPLAY_OLED_128x64 || DISPLAY_OLED_128x32
        depends on DISPLAY_TYPE_OLED
    config DISPLAY_OLED_HEIGHT
        int
        default 64 if DISPLAY_OLED_128x64
        default 32 if DISPLAY_OLED_128x32
        default 16 if DISPLAY_OLED_96x16
        depends on DISPLAY_TYPE_OLED
    config DISPLAY_I2C_TIMEOUT_MSEC
        int
        default 10
    config DISPLAY_I2C_BUS_SPEED
        int
        default 700000 if DISPLAY_TYPE_OLED
        default 100000
endmenu
menu "WiFi Configuration"
    choice WIFI_MODE
        bool "WiFi Mode"
        default WIFI_MODE_SOFTAP
        config WIFI_MODE_STATION
            bool "Connect to SSID"
        config WIFI_MODE_SOFTAP
            bool "Create SoftAP"
        config WIFI_MODE_SOFTAP_STATION
            bool "Connect to SSID and create SoftAP"
        config WIFI_MODE_OFF
            bool "Disabled"
    endchoice
    config WIFI_MODE
        int
        default 0 if WIFI_MODE_OFF
        default 1 if WIFI_MODE_STATION
        default 2 if WIFI_MODE_SOFTAP
        default 3 if WIFI_MODE_SOFTAP_STATION
    config WIFI_HOSTNAME_PREFIX
        string "Hostname prefix"
        default "esp32cs_"
        help
            The OpenLCB node identifier will be appended to this value, ie:
            esp32cs_0502010300000.
    menu "Station Configuration"
        depends on WIFI_MODE_STATION || WIFI_MODE_SOFTAP_STATION
        config WIFI_STATION_SSID
            string "Station SSID"
        config WIFI_STATION_PASSWORD
            string "Station Password"
    endmenu
    menu "SoftAP Configuration"
        depends on WIFI_MODE_SOFTAP || WIFI_MODE_SOFTAP_STATION
        config WIFI_SOFTAP_SSID
            string "SoftAP SSID"
            default "esp32csap"
        config WIFI_SOFTAP_PASSWORD
            string "SoftAP Password"
            default "esp32csap"
        config WIFI_SOFTAP_CHANNEL
            int "SoftAP Channel"
            default 1
            range 1 14
            help
                This configures the channel that will be used by the SoftAP. There
                are fourteen channels available to pick from and some are better
                than others. The best channels to pick from are: 1, 6, 11 since
                these do not overlap with other channels.
    endmenu
    menu "SNTP Configuration"
        depends on WIFI_MODE_STATION || WIFI_MODE_SOFTAP_STATION
        config SNTP
            bool "Enable SNTP synchronization"
            default n
            help
                By enabling this option the ESP32 will attempt to synchronize the
                system time with an external SNTP server once per hour.
        config SNTP_SERVER
            string "SNTP Server"
            default "pool.ntp.org"
            depends on SNTP
        config SNTP_TIMEZONE
            string "Timezone"
            default "UTC0"
            depends on SNTP
            help
                This is the timezone that the ESP32 OpenLCB IO Board is running in.
                The value must follow POSIX notation.
                A few common values:
                * PST8PDT,M3.2.0,M11.1.0 -- UTC-8 with automatic DST adjustment
                * MST7MDT,M3.2.0,M11.1.0 -- UTC-7 with automatic DST adjustment
                * CST6CDT,M3.2.0,M11.1.0 -- UTC-6 with automatic DST adjustment
                * EST5EDT,M3.2.0,M11.1.0 -- UTC-5 with automatic DST adjustment
                A complete list can be seen here in the second column:
                https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv
    endmenu
endmenu
menu "DCC Signal Configuration"
    config DCC_VFS_MOUNT_POINT
        string
        default "/dev/track"
    choice DCC_TRACK_OUTPUTS
        bool "Track Outputs"
        config DCC_TRACK_OUTPUTS_OPS_AND_PROG
            bool "OPS and PROG"
            select OPS_TRACK_ENABLED
            select PROG_TRACK_ENABLED
        config DCC_TRACK_OUTPUTS_OPS_ONLY
            bool "OPS Only"
            select OPS_TRACK_ENABLED
        config DCC_TRACK_OUTPUTS_PROG_ONLY
            bool "PROG Only"
            select PROG_TRACK_ENABLED
    endchoice
    config OPS_TRACK_ENABLED
        bool
        default n
    config PROG_TRACK_ENABLED
        bool
        default n
    config ENERGIZE_TRACK_ON_STARTUP
        bool "Energize track upon startup"
        default n
        depends on DCC_TRACK_OUTPUTS_OPS_AND_PROG || DCC_TRACK_OUTPUTS_OPS_ONLY
        help
            Enabling this option will energize the track automatically upon
            startup of the command station.
    menu "OPS"
        depends on DCC_TRACK_OUTPUTS_OPS_AND_PROG || DCC_TRACK_OUTPUTS_OPS_ONLY
        choice OPS_HBRIDGE_TYPE
            bool "H-Bridge type"
            default OPS_HBRIDGE_DRV8873_5A
            help
                The following motor driver modules are supported:
                L298           : Arduino Motor shield Rev3 based on the L298 chip. Max Output 2A per channel https://store.arduino.cc/usa/arduino-motor-shield-rev3
                LMD18200       : Texas Instruments LMD18200 55V 3A h-bridge. http://www.ti.com/lit/ds/symlink/lmd18200.pdf
                DRV880x        : Texas Instruments DRV880x 36V 2.8A h-bridge. https://www.ti.com/lit/ds/symlink/drv8800.pdf
                DRV8873        : Texas Instruments DRV8873 36V 10A h-bridge. https://www.ti.com/lit/ds/symlink/drv8873.pdf
                DRV8873_5A     : Texas Instruments DRV8873 36V 10A h-bridge (limited to 5A). https://www.ti.com/lit/ds/symlink/drv8873.pdf
                POLOLU         : Pololu MC33926 Motor Driver (shield or carrier). Max Output 2.5A per channel https://www.pololu.com/product/1213 / https://www.pololu.com/product/2503
                BTS7960B_5A    : Infineon Technologies BTS 7960 Motor Driver Module. Max Output 5A (43A actual max) https://www.infineon.com/dgdl/bts7960b-pb-final.pdf
                BTS7960B_10A   : Infineon Technologies BTS 7960 Motor Driver Module. Max Output 10A (43A actual max) https://www.infineon.com/dgdl/bts7960b-pb-final.pdf
            config OPS_HBRIDGE_L298
                bool "L298"
            config OPS_HBRIDGE_LMD18200
                bool "LMD18200"
            config OPS_HBRIDGE_DRV880X
                bool "DRV880x"
            config OPS_HBRIDGE_DRV8873
                bool "DRV8873"
            config OPS_HBRIDGE_DRV8873_5A
                bool "DRV8873 (5A limit)"
            config OPS_HBRIDGE_POLOLU
                bool "Pololu MC33926"
            config OPS_HBRIDGE_BTS7960B_5A
                bool "BTS7960B (5A limit)"
            config OPS_HBRIDGE_BTS7960B_10A
                bool "BTS7960B (10A limit)"
        endchoice
        config OPS_HBRIDGE_TYPE_NAME
            string
            default "L298" if OPS_HBRIDGE_L298
            default "LMD18200" if OPS_HBRIDGE_LMD18200
            default "DRV880x" if OPS_HBRIDGE_DRV880X
            default "DRV8873" if OPS_HBRIDGE_DRV8873 || OPS_HBRIDGE_DRV8873_5A
            default "MC33926" if OPS_HBRIDGE_POLOLU
            default "BTS7960B" if OPS_HBRIDGE_BTS7960B_5A
            default "BTS7960B" if OPS_HBRIDGE_BTS7960B_10A
        config OPS_HBRIDGE_MAX_MILLIAMPS
            int
            default 2000 if OPS_HBRIDGE_L298
            default 3000 if OPS_HBRIDGE_LMD18200
            default 2800 if OPS_HBRIDGE_DRV880X 
            default 10000 if OPS_HBRIDGE_DRV8873 || OPS_HBRIDGE_DRV8873_5A
            default 2500 if OPS_HBRIDGE_POLOLU
            default 43000 if OPS_HBRIDGE_BTS7960B_5A
            default 43000 if OPS_HBRIDGE_BTS7960B_10A
        config OPS_HBRIDGE_LIMIT_MILLIAMPS
            int
            default 2000 if OPS_HBRIDGE_L298
            default 3000 if OPS_HBRIDGE_LMD18200
            default 2800 if OPS_HBRIDGE_DRV880X
            default 10000 if OPS_HBRIDGE_DRV8873
            default 5000 if OPS_HBRIDGE_DRV8873_5A
            default 2500 if OPS_HBRIDGE_POLOLU
            default 5000 if OPS_HBRIDGE_BTS7960B_5A
            default 10000 if OPS_HBRIDGE_BTS7960B_10A
        config OPS_DCC_PREAMBLE_BITS
            int "DCC packet preamble bits"
            range 11 20
            default 16 if !RAILCOM_DISABLED
            default 11
            help
                This controls the number of "1" bits to be transmitted
                before the payload of the DCC packet. If RailCom is enabled
                this must be at least 16.
    endmenu
    menu "PROG"
        depends on DCC_TRACK_OUTPUTS_OPS_AND_PROG || DCC_TRACK_OUTPUTS_PROG_ONLY
        choice PROG_HBRIDGE_TYPE
            bool "H-Bridge type"
            default PROG_HBRIDGE_DRV880X
            help
                The following motor driver modules are supported:
                L298           : Arduino Motor shield Rev3 based on the L298 chip. Max Output 2A per channel https://store.arduino.cc/usa/arduino-motor-shield-rev3
                LMD18200       : Texas Instruments LMD18200 55V 3A h-bridge. http://www.ti.com/lit/ds/symlink/lmd18200.pdf
                DRV880x        : Texas Instruments DRV880x 36V 2.8A h-bridge. https://www.ti.com/lit/ds/symlink/drv8800.pdf
                DRV8873        : Texas Instruments DRV8873 36V 10A h-bridge. https://www.ti.com/lit/ds/symlink/drv8873.pdf
                DRV8873_5A     : Texas Instruments DRV8873 36V 10A h-bridge (limited to 5A). https://www.ti.com/lit/ds/symlink/drv8873.pdf
                POLOLU         : Pololu MC33926 Motor Driver (shield or carrier). Max Output 2.5A per channel https://www.pololu.com/product/1213 / https://www.pololu.com/product/2503
                BTS7960B_5A    : Infineon Technologies BTS 7960 Motor Driver Module. Max Output 5A (43A actual max) https://www.infineon.com/dgdl/bts7960b-pb-final.pdf
                BTS7960B_10A   : Infineon Technologies BTS 7960 Motor Driver Module. Max Output 10A (43A actual max) https://www.infineon.com/dgdl/bts7960b-pb-final.pdf
            config PROG_HBRIDGE_L298
                bool "L298"
            config PROG_HBRIDGE_LMD18200
                bool "LMD18200"
            config PROG_HBRIDGE_DRV880X
                bool "DRV880x"
            config PROG_HBRIDGE_DRV8873
                bool "DRV8873"
            config PROG_HBRIDGE_DRV8873_5A
                bool "DRV8873 (5A limit)"
            config PROG_HBRIDGE_POLOLU
                bool "Pololu MC33926"
            config PROG_HBRIDGE_BTS7960B_5A
                bool "BTS7960B (5A limit)"
            config PROG_HBRIDGE_BTS7960B_10A
                bool "BTS7960B (10A limit)"
        endchoice
        config PROG_HBRIDGE_TYPE_NAME
            string
            default "L298" if PROG_HBRIDGE_L298
            default "LMD18200" if PROG_HBRIDGE_LMD18200
            default "DRV880x" if PROG_HBRIDGE_DRV880X
            default "DRV8873" if PROG_HBRIDGE_DRV8873 || PROG_HBRIDGE_DRV8873_5A
            default "MC33926" if PROG_HBRIDGE_POLOLU
            default "BTS7960B" if PROG_HBRIDGE_BTS7960B_5A
            default "BTS7960B" if PROG_HBRIDGE_BTS7960B_10A
        config PROG_HBRIDGE_MAX_MILLIAMPS
            int
            default 2000 if PROG_HBRIDGE_L298
            default 3000 if PROG_HBRIDGE_LMD18200
            default 2800 if PROG_HBRIDGE_DRV880X
            default 10000 if PROG_HBRIDGE_DRV8873 || PROG_HBRIDGE_DRV8873_5A
            default 2500 if PROG_HBRIDGE_POLOLU
            default 43000 if PROG_HBRIDGE_BTS7960B_5A || PROG_HBRIDGE_BTS7960B_10A
        config PROG_DCC_PREAMBLE_BITS
            int "DCC packet preamble bits"
            range 22 50
            default 22
            help
                This controls the number of "1" bits to be transmitted
                before the payload of the DCC packet. Some decoders may
                require more "1" bits for proper operation, this is usually
                only a problem with some brands of sound decoders.
    endmenu
    menu "Advanced Configuration"
        choice DCC_RMT_LOGGING
            bool "DCC RMT logging"
            default DCC_RMT_LOGGING_MINIMAL
            config DCC_RMT_LOGGING_VERBOSE
                bool "Verbose"
            config DCC_RMT_LOGGING_MINIMAL
                bool "Minimal"
        endchoice
        config DCC_RMT_LOG_LEVEL
            int
            default 4 if DCC_RMT_LOGGING_MINIMAL
            default 3 if DCC_RMT_LOGGING_VERBOSE
            default 5
        config PACKET_QUEUE_SIZE
            int "Track DCC Packet queue size"
            default 5
            range 5 20
            help
                This is the number of raw packets to allow for outbound
                transmission to the track. Generally this does not need to
                be very large and should be around the same size as
                DCC_PACKET_POOL_SIZE.
        config DCC_PACKET_POOL_SIZE
            int "Maximum number of DCC packets to queue"
            default 5
            range 2 20
            help
                Declares the maximum number of DCC packets to allow for the
                track, generally this does not need to be very large and the
                default value should be sufficient.
        config DCC_RMT_EMC_SPREAD
            bool "EMC spectrum spreading"
            default n
            help
                When enabled this will cause the bit times to be adjusted by
                a small amount to spread out the pulses widths to reduce the
                EMC peak emissions.
        config DCC_RMT_HIGH_FIRST
            bool "Generate HIGH,LOW signal"
            default y
            help
                When enabled this will cause the RMT to generate a HIGH then
                LOW signal on the output PIN. When disabled it will be LOW then
                HIGH.
        config DCC_RMT_TICKS_ZERO_PULSE
            int "DCC ZERO RMT tick count"
            range 95 9900
            default 100
            help
                This controls how many RMT ticks will be used for each half of
                a ZERO bit being transmitted by the RMT.
                Warning: Depending on the h-bridge in use it may be necessary
                to pad this value with one or two ticks to allow for transition
                of HIGH to LOW. The default value accounts for this variance of
                the h-bridges.
        config DCC_RMT_TICKS_ONE_PULSE
            int "DCC ONE RMT tick count"
            range 55 61
            default 58
            help
                This controls how many RMT ticks will be used for each half of
                a ONE bit being transmitted by the RMT.
                Warning: Depending on the h-bridge in use it may be necessary
                to pad this value with one or two ticks to allow for transition
                of HIGH to LOW. The default value accounts for this variance of
                the h-bridges.
        choice DCC_RMT_CLOCK_SOURCE
            bool "RMT Clock source"
            default DCC_RMT_CLOCK_SOURCE_APB
            help
                The RMT peripheral supports two clock sources:
                * APB  80MHz
                * REF   1MHz
            config DCC_RMT_CLOCK_SOURCE_APB
                bool "APB (80MHz)"
            config DCC_RMT_CLOCK_SOURCE_REF
                bool "REF_CLK (1MHz)"
        endchoice
        config DCC_RMT_CLOCK_SOURCE
            int
            default 0 if DCC_RMT_CLOCK_SOURCE_REF
            default 1 if DCC_RMT_CLOCK_SOURCE_APB
        config DCC_RMT_USE_REF_CLOCK
            bool "Use REF_TICK clock source (1Mhz)"
            default n
            help
                When enabled this will cause the RMT to use the REF_TICK clock
                as the clock source, this is a 1Mhz clock. By default the RMT
                will use the APB clock which is an 80Mhz clock.
        config DCC_RMT_CLOCK_DIVIDER
            int "RMT clock divider"
            range 1 255
            default 1 if DCC_RMT_USE_REF_CLOCK
            default 80
            help
                When using the APB clock (80Mhz) this will provide around a
                1usec time factor for the RMT pulses.
    endmenu
endmenu
menu "RailCom Configuration"
    choice RAILCOM
        bool "RailCom mode"
        default RAILCOM_FULL if IDF_TARGET_ESP32
        default RAILCOM_DISABLED if IDF_TARGET_ESP32S3
        config RAILCOM_FULL
            bool "Generate cut-out and receive data"
        config RAILCOM_CUTOUT_ONLY
            bool "Generate cut-out only"
        config RAILCOM_DISABLED
            bool "Disabled"
    endchoice
    choice RAILCOM_UART
        bool "RailCom UART"
        default RAILCOM_UART2
        depends on RAILCOM_FULL
        config RAILCOM_UART1
            bool "UART1"
        config RAILCOM_UART2
            bool "UART2"
    endchoice
    config RAILCOM_UART
        int
        default 1 if RAILCOM_UART1
        default 2 if RAILCOM_UART2
        depends on RAILCOM_FULL
    config RAILCOM_DUMP_PACKETS
        bool "Display all RailCom packets as they are received"
        default n
        depends on RAILCOM_FULL
    config RAILCOM_FEEDBACK_QUEUE
        int "RailCom Feedback queue size"
        default 10
        depends on RAILCOM_FULL
        help
            This controls the number of RailCom feedback packets to
            pre-allocate for receiving feedback from RailCom enabled DCC
            decoders. This value must be larger than the OPS DCC packet
            queue size.
endmenu
menu "Fast Clock Configuration"
    config FASTCLOCK
        bool "Enable FastClock (fast)"
        default n
        help
            Enabling this option will cause the ESP32 Command Station to
            advertise itself as an LCC Fast Clock.
    menu "FastClock (fast)"
        depends on FASTCLOCK
        config FASTCLOCK_RATE
            int "FastClock rate quarters"
            default 4
            range -512 511
            help
                This is the rate at which the fast clock will advance time.
        config FASTCLOCK_START_YEAR
            int "FastClock year"
            default 1900
            help
                This is the year that will be used upon startup for the fast
                clock.
        config FASTCLOCK_START_MONTH
            int "FastClock month"
            default 1
            range 1 12
            help
                This is the month that will be used upon startup for the fast
                clock.
        config FASTCLOCK_START_DAY
            int "FastClock day"
            default 1
            range 1 31
            help
                This is the day of the month that will be used upon startup for
                the fast clock.
        config FASTCLOCK_START_HOUR
            int "FastClock hour"
            default 1
            range 1 24
            help
                This is the hour of the day that will be used upon startup for
                the fast clock.
        config FASTCLOCK_START_MINUTE
            int "FastClock minute"
            default 1
            range 1 60
            help
                This is the minute of the hour that will be used upon startup
                for the fast clock.
        config FASTCLOCK_DEFAULT_ID
            hex "FastClock Clock ID"
            default 0x010100000100
            help
                This is the clock ID that will be created and advertised.
                The default Fast Clock uses ID 0x010100000100.
    endmenu
    config FASTCLOCK_REALTIME
        bool "Enable FastClock (real-time)"
        default n
        depends on !WIFI_MODE_DISABLED
        select SNTP
        help
            Enabling this option will cause the ESP32 Command Station to
            advertise itself as an LCC real-time Fast Clock.
    menu "Fast Clock (Real Time)"
        depends on FASTCLOCK_REALTIME
        config FASTCLOCK_REALTIME_ID
            hex "Real-time Clock ID"
            default 0x010100000101
            help
                This is the clock ID that will be created and advertised.
                Real-Time clock defaults to 0x010100000101.
    endmenu
endmenu
menu "Thermal Monitor Configuration"
    depends on !TEMPSENSOR_DISABLED
    choice THERMALMONITOR_TYPE
        bool "Thermistor/IC"
        default THERMALMONITOR_TYPE_MCP9701
        config THERMALMONITOR_TYPE_MCP9700
            bool "MCP9700/MCP9700A"
        config THERMALMONITOR_TYPE_MCP9701
            bool "MCP9701/MCP9701A"
        config THERMALMONITOR_TYPE_CUSTOM
            bool "Custom"
    endchoice
    config THERMALMONITOR_ZERO_MV
        int "Millivolts at 0C"
        range 0 3300
        default 500 if THERMALMONITOR_TYPE_MCP9700
        default 400 if THERMALMONITOR_TYPE_MCP9701
        default 0
        help
            This value is used as a correction to the calculated millivolts
            reading of the ADC pin as a 0C starting point. For the MCP9700 it
            should be 500mV, MCP9701 should be 400mV.
    config THERMALMONITOR_MV_PER_C
        int "Millivolts per 1C"
        range 10 33000
        default 100 if THERMALMONITOR_TYPE_MCP9700
        default 195 if THERMALMONITOR_TYPE_MCP9701
        default 10
        help
            This value is used to convert the raw millivolts value into degrees.
            NOTE: This value needs to be multiplied by 10 to account for the
            fractions of a degree per millivolt.
    config THERMALMONITOR_WARNING
        int "Warning temperature (C)"
        range 0 125
        default 50
        help
            When the temperature exceeds this limit the ESP32 Command Station
            will emit an event to the OpenLCB (LCC) bus.
    config THERMALMONITOR_SHUTDOWN
        int "Shutdown temperature (C)"
        range 0 125
        default 80
        help
            When the temperature exceeds this limit the ESP32 Command Station
            will emit an event to the OpenLCB (LCC) bus and shutdown all track
            outputs.
endmenu
menu "Status LED Configuration"
    depends on STATUS_LED_DATA_PIN != -1
    config STATUS_LED_BRIGHTNESS
        int "LED brightness"
        range 8 255
        default 128
        help
            Controls how bright the LEDs will appear. The lower the value the
            darker the LED will appear.
            Recommended value is 128.
    choice STATUS_LED_TYPE
        bool "LED type"
        default STATUS_LED_TYPE_WS281X
        help
            This defines the type of LED, the following types are supported:
            STATUS_LED_TYPE  RESET PULSE  LED TYPES
            WS2811           300 uS       WS2811
            WS281X           300 uS       NeoPixel, WS2812, WS2813
            WS281X_800K      50 uS        NeoPixel, WS2812, WS2813
            WS281X_400K      50 uS        NeoPixel, WS2812, WS2813
            SK6812           80 uS        SK6812
            LC6812           80 uS        LC6812
            APA106           50 uS        APA106
            TX1812           80 uS        TX1812
        config STATUS_LED_TYPE_WS281X
            bool "WS281X"
        config STATUS_LED_TYPE_WS281X_800K
            bool "WS281X (800k)"
        config STATUS_LED_TYPE_WS281X_400K
            bool "WS281X (400k)"
        config STATUS_LED_TYPE_WS2811
            bool "WS2811"
        config STATUS_LED_TYPE_SK6812
            bool "SK6812"
        config STATUS_LED_TYPE_LC6812
            bool "LC6812"
        config STATUS_LED_TYPE_APA106
            bool "APA106"
        config STATUS_LED_TYPE_TX1812
            bool "TX1812"
    endchoice
    choice STATUS_LED_COLOR
        bool "LED color order"
        default STATUS_LED_COLOR_RGB
        default STATUS_LED_COLOR_GRB if STATUS_LED_TYPE_TX1812
        config STATUS_LED_COLOR_RGB
            bool "Red, Green, Blue"
        config STATUS_LED_COLOR_BRG
            bool "Blue, Red, Green"
        config STATUS_LED_COLOR_RBG
            bool "Red, Blue, Green"
        config STATUS_LED_COLOR_GRB
            bool "Green, Red, Blue"
        config STATUS_LED_COLOR_RGBW
            bool "Red, Green, Blue, White"
        config STATUS_LED_COLOR_GRBW
            bool "Green, Red, Blue, White"
    endchoice
    config STATUS_LED_UPDATE_INTERVAL_MSEC
        int "LED update frequency (milliseconds)"
        default 450
endmenu
menu "Turnout Management"
    config TURNOUT_CREATE_ON_DEMAND
        bool "Create turnouts on first use"
        default y
        help
            When this option is enabled, the first attempt to access a turnout
            will result in it being created and persisted. NOTE: This will only
            create DCC Turnouts. For OpenLCB based turnouts you will need to
            update them to provide the event mapping.
    config TURNOUT_PERSISTENCE_INTERVAL_SEC
        int "Number of seconds between automatic persistence of turnout list"
        default 30
    choice TURNOUT_LOGGING
        bool "Turnout Manager logging"
        default TURNOUT_LOGGING_MINIMAL
        config TURNOUT_LOGGING_VERBOSE
            bool "Verbose"
        config TURNOUT_LOGGING_MINIMAL
            bool "Minimal"
    endchoice
    config TURNOUT_LOG_LEVEL
        int
        default 4 if TURNOUT_LOGGING_MINIMAL
        default 3 if TURNOUT_LOGGING_VERBOSE
        default 5
endmenu
menu "Locomotive Roster"
    config ROSTER_AUTO_IDLE_NEW_LOCOS
        bool "Enable automatic idle for newly created roster entries"
        default n
        help
            By enabling this option, when any roster entry is newly added to
            the database it will default to automatic idle.
    config ROSTER_AUTO_CREATE_ENTRIES
        bool "Create a roster entry for new trains on first use"
        default y
        help
            By enabling this option, any train that is requested that does not
            already exist in the locomotive roster will be automatically added
            to the roster using DCC 128 speed step mode.
    config ROSTER_PERSISTENCE_INTERVAL_SEC
        int "Locomotive roster persistence interval (seconds)"
        default 30
        help
            Any changes to locomotives in the roster will be persisted after
            this many seconds to persistant storage (SPIFFS or SD). This is
            done to minimize the number of write operations when roster entries
            are modified.
    choice ROSTER_LOGGING
        bool "Turnout Manager logging"
        default ROSTER_LOGGING_MINIMAL
        config ROSTER_LOGGING_VERBOSE
            bool "Verbose"
        config ROSTER_LOGGING_MINIMAL
            bool "Minimal"
    endchoice
    config ROSTER_LOG_LEVEL
        int
        default 4 if ROSTER_LOGGING_MINIMAL
        default 3 if ROSTER_LOGGING_VERBOSE
        default 5
endmenu
menu "Train Search Protocol"
    choice TSP_LOGGING
        bool "Turnout Manager logging"
        default TSP_LOGGING_MINIMAL
        config TSP_LOGGING_VERBOSE
            bool "Verbose"
        config TSP_LOGGING_MINIMAL
            bool "Minimal"
    endchoice
    config TSP_LOGGING_LEVEL
        int
        default 4 if TSP_LOGGING_MINIMAL
        default 3 if TSP_LOGGING_VERBOSE
        default 5
endmenu
menu "Crash Behavior"
    config CRASH_COLLECT_CORE_DUMP
        bool "Collect core dump on crash"
        default y
    config CRASH_HALT_ON_STARTUP
        bool "Halt startup when core dump detected"
        default y
        depends on CRASH_COLLECT_CORE_DUMP
        help
            Enabling this option will cause the ESP32 Command Station to halt
            normal startup when a core dump from a previous crash is detected.
    config CRASH_CLEANUP_TIMEOUT_SEC
        int "Number of seconds to allow clearing of old core dump"
        default 15
        range 1 60
        depends on CRASH_COLLECT_CORE_DUMP
        help
            This option controls how long the ESP32 Command Station will wait
            for the factory reset button to be pressed before halting or
            deleting the core dump.
endmenu
menu "Current Sense"
    config CURRENTSENSE_USE_SHUNT
        bool "Use shunt for current sense"
        default n
        help
            By default the raw ADC value will be used to convert directly to mA
            by multiplying by the maximum mA for the h-bridge and divided by
            4096 (max ADC value). Enabling this option will adjust this to be
            calculated based on the shunt values instead. The ESP32 Command
            Station PCB uses an INA2180, https://www.ti.com/lit/ds/symlink/ina2180.pdf
            with a 0.0005Ohm shunt resistor.
    choice CURRENTSENSE_SHUNT_TYPE
        bool "Shunt Gain"
        depends on CURRENTSENSE_USE_SHUNT
        default CURRENTSENSE_SHUNT_100
        config CURRENTSENSE_SHUNT_20
            bool "20 V/V"
        config CURRENTSENSE_SHUNT_50
            bool "50 V/V"
        config CURRENTSENSE_SHUNT_100
            bool "100 V/V"
        config CURRENTSENSE_SHUNT_200
            bool "200 V/V"
    endchoice
endmenu